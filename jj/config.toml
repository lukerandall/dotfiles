"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[revset-aliases]
# revsets for working with git branches
# see jj bump & jj tug aliases
"bumpable()" = 'all:mutable() & mine()'
"closest_bookmark(to)" = "heads(::to & bookmarks())"
"tug_target()" = "tug_target(@-)"
"tug_target(to)" = "to & ~private()"
"tuggable()" = "tuggable(@-)"
"tuggable(to)" = "heads(closest_bookmark(to) & ~private())"

# current branch with a bit of context
"slice()" = "slice(@)"
"slice(from)" = "ancestors(reachable(from, mutable()), 2)"

# commits that haven't been merged into trunk
"open()" = "open(mine())"
"open(domain)" = "domain ~ ::immutable_heads()"

# commits that have been merged into trunk
"merged()" = "merged(trunk())"
"merged(into)" = "bookmarks() & ..into"

# recent commits
"last()" = "last(20)"
"last(n)" = "ancestors(@, n)"

"overview()" = "last() | orphans() | stale()"

"recent()" = 'recent(after:"14 days ago")'
"recent(when)" = '''
    ancestors(
        reachable(
            immutable_heads()..(@ | committer_date(when)::),
            mutable()),
        2)
    | trunk()
'''

# view revisions ancestry from where it diverged from trunk
"stack()" = "stack(@)"
"stack(from)" = "ancestors((immutable()..from) | from::, 2)"

# see the ancestry of two heads back to where they diverged
# usage: compare(abc | foo | bar)
"compare(heads)" = "connected(ancestors(::heads ~ ::trunk(), 2)) | heads"

# some helpers for finding forgotten/unloved bookmarks
"orphans()" = "mutable() ~ ::bookmarks()"
"stale()" = "bookmarks() ~ trunk()::"
"lagging_bookmarks()" = "::bookmarks() & mutable() & mine() ~ trunk()::"

# commits considered private by git.private-commits
"private()" = "description(glob:\"private:*\")"
"wip()" = 'description(glob:"wip:*") ~ ::immutable_heads()'
"trash()" = 'description(glob:"trash:*") ~ ::immutable_heads()'


[aliases]
bootstrap = ["git", "init", "--colocate"]
gf = ["git", "fetch"]
gp = ["git", "push"]

# rebase bumpable branches on top of trunk
bump = ["rebase", "-b", "bumpable()", "-d", "trunk()"]

# various convenience commands
fresh = ["new", "main"]
pop = ["rebase", "-r", "@", "-d", "trunk()"]
ppop = ["rebase", "-r", "@-", "-d", "trunk()"]
pushdown = ["rebase", "-r", "@-", "--insert-after"]

# move tuggable bookmarks forward to latest non-private non-current commits
tug = ["bookmark", "move", "--from", "tuggable()", "--to", "tug_target()"]

# bring a branch up to date with trunk()
up = ["rebase", "--skip-emptied", "-d", "trunk()"]

blame = ["file", "annotate"]
changed = ["diff", "--name-only"]
commitid = ["log", "--no-graph", "-T", 'commit_id ++ "\n"']
changeid = ["log", "--no-graph", "-T", 'change_id ++ "\n"']
difft = ["--config", "ui.diff.tool='difft --color=always $left $right'", "diff"]

all = ["log", "-r", "all()"]
l = ["log", "-r", "overview()"]


fr = ["util", "exec", "--", "bash", "-c", """
set -euo pipefail
jj git fetch
jj new "trunk()"
""", ""]

pr = ["util", "exec", "--", "bash", "-c", """
set -euo pipefail
rev=${1:-"@-"}
bookmark=${2:-""}
base=${3:-""}

if [[ -z "$bookmark" ]]; then
    jj git push -c "$rev"
    bookmark=$(jj bookmark list -r "$rev" | cut -d : -f 1)
else
    jj bookmark create "$bookmark" -r "$rev"
    jj git push --bookmark "$bookmark" --allow-new
fi

if [[ -n "$base" ]]; then
    gh pr create --head "$bookmark" --base "$base"
else
    gh pr create --head "$bookmark"
fi
""", ""]


[fix.tools.rubocop]
command = [
  "bundle",
  "exec",
  "rubocop",
  "--autocorrect-all",
  "--format",
  "quiet",
  "--stderr",
  "--stdin",
  "$path",
]
patterns = ["glob:'**/*.rb'"]

[merge-tools.diffconflicts]
program = "nvim"
merge-args = ["-c", "JJDiffConflicts!", "$output", "$base", "$left", "$right"]
merge-tool-edits-conflict-markers = true


[templates]
draft_commit_description = '''
concat(
  coalesce(description, default_commit_description, "\n"),
  surround(
    "\nJJ: This commit contains the following changes:\n", "",
    indent("JJ:     ", diff.stat(72)),
  ),
  "\nJJ: ignore-rest\n",
  diff.git(),
)
'''


[ui]
default-command = "log"
diff-editor = ":builtin"


[user]
name = "Luke Randall"
email = "luke.randall@gmail.com"


[git]
private-commits = "private()"
