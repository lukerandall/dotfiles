"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[revset-aliases]
# revsets for working with git branches
# see jj bump & jj tug aliases
"main()" = 'main'
"bumpable()" = 'all:mutable() & mine()'
"closest_bookmark(to)" = "heads(::to & bookmarks())"
"tug_target()" = "tug_target(@-)"
"tug_target(to)" = "to & ~private()"
"tuggable()" = "tuggable(@-)"
"tuggable(to)" = "heads(closest_bookmark(to) & ~private())"

# ahead/behind commits relative to trunk
"tree()" = "tree(@)"
"tree(to)" = "trunk()..to | to..trunk() | trunk() | to:: | fork_point(trunk() | to)"

# current "branch"" with a bit of context
"slice()" = "slice(@)"
"slice(from)" = "ancestors(reachable(from, mutable()), 2)"

# commits that haven't been merged into trunk
"open()" = "open(mine())"
"open(domain)" = "domain ~ ::immutable_heads()"

# recent commits
"last()" = "last(20)"
"last(n)" = "ancestors(@, n)"

# commits that have been merged into trunk
"merged()" = "merged(trunk())"
"merged(into)" = "bookmarks() & ..into"

# stack(x, n) is the set of mutable commits reachable from 'x', with 'n'
# parents. 'n' is often useful to customize the display and return set for
# certain operations. 'x' can be used to target the set of 'roots' to traverse,
# e.g. @ is the current stack.
'stack()' = 'stack(@)'
'stack(x)' = 'stack(x, 2)'
'stack(x, n)' = 'ancestors(reachable(x, mutable()), n)'

"overview()" = "last() | orphans() | stale()"

"recent()" = 'recent(after:"14 days ago")'
"recent(when)" = '''
    ancestors(
        reachable(
            immutable_heads()..(@ | committer_date(when)::),
            mutable()),
        2)
    | trunk()
'''

# see the ancestry of two heads back to where they diverged
# usage: compare(abc | foo | bar)
"compare(heads)" = "connected(ancestors(::heads ~ ::trunk(), 2)) | heads"

# some helpers for finding forgotten/unloved bookmarks
"orphans()" = "mutable() ~ ::bookmarks()"
"stale()" = "bookmarks() ~ trunk()::"
"lagging_bookmarks()" = "::bookmarks() & mutable() & mine() ~ trunk()::"

# commits considered private by git.private-commits
"private()" = "description(glob:\"private:*\")"
# commits that will be parent to new changes made with fresh / fr
"always_include()" = "description(glob:\"private:include:*\")"
"wip()" = 'description(glob:"wip:*") ~ ::immutable_heads()'
"trash()" = 'description(glob:"trash:*") ~ ::immutable_heads()'

[revsets]
log = "stack(mine() | @) | trunk() | @"

[aliases]
# quick aliases for common commands
all = ["log", "-r", "all()"]
c = ["commit"]
l = ["log", "-r", "overview()"]
n = ["new"]
r = ["rebase"]
s = ["status"]
sq = ["squash"]
si = ["split", "-i"]

# git helpers
bootstrap = ["git", "init", "--colocate"]
gf = ["git", "fetch"]
gp = ["git", "push"]
gpd = ["git", "push", "--deleted"]

# rebase bumpable branches on top of trunk
bump = ["rebase", "-b", "bumpable()", "-d", "trunk()"]

# various convenience commands
fresh = ["new", "all:main() | always_include()"]
last = ["show", "-r", "@-"]
pop = ["rebase", "-r", "@", "-d", "trunk()"]
ppop = ["rebase", "-r", "@-", "-d", "trunk()"]
pushdown = ["rebase", "-r", "@-", "--insert-after"]

# move tuggable bookmarks forward to latest non-private non-current commits
tug = ["bookmark", "move", "--from", "tuggable()", "--to", "tug_target()"]

# bring a branch up to date with trunk()
up = ["rebase", "--skip-emptied", "-d", "trunk()"]

# Retrunk the current stack of work.
reheat = [
  "rebase",
  "--skip-emptied",
  "-d",
  "trunk()",
  "-s",
  "roots(trunk()..stack(@))",
]

# Take content from any change, and move it into @. The inverse of 'eject'
# - jj consume xyz path/to/file`
consume = ["squash", "--into", "@", "--from"]

# Eject content from @ into any other change. The inverse of 'consume'
# - jj eject xyz --interactive
eject = ["squash", "--from", "@", "--into"]

blame = ["file", "annotate"]
changed = ["diff", "--name-only"]
difft = ["--config", "ui.diff.tool='difft --color=always $left $right'", "diff"]

fr = ["util", "exec", "--", "bash", "-c", """
set -euo pipefail
jj git fetch
jj new "all:main() | always_include()"
""", ""]

go = ["util", "exec", "--", "bash", "-c", """
set -euo pipefail

if [ $# -eq 0 ]; then
    echo "Error: Please provide a bookmark name as an argument" >&2
    exit 1
fi

bookmark="$1"
jj bookmark track "${bookmark}@origin"
jj new "$bookmark"
""", ""]


[fix.tools.rubocop]
command = [
  "bundle",
  "exec",
  "rubocop",
  "--autocorrect-all",
  "--format",
  "quiet",
  "--stderr",
  "--stdin",
  "$path",
]
patterns = ["glob:'**/*.rb'"]

[merge-tools.diffconflicts]
program = "nvim"
merge-args = ["-c", "JJDiffConflicts!", "$output", "$base", "$left", "$right"]
merge-tool-edits-conflict-markers = true


[templates]
draft_commit_description = '''
concat(
  coalesce(description, default_commit_description, "\n"),
  surround(
    "\nJJ: This commit contains the following changes:\n", "",
    indent("JJ:     ", diff.stat(72)),
  ),
  "\nJJ: ignore-rest\n",
  diff.git(),
)
'''


[ui]
default-command = "log"
diff-editor = ":builtin"


[user]
name = "Luke Randall"
email = "luke.randall@gmail.com"


[git]
private-commits = "private()"
