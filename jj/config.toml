[revset-aliases]
# revsets for working with git branches
# see jj bump & jj tug aliases
"bumpable()" = 'all:mutable() & mine()'
"tug_target()" = "@- & ~private()"
"tuggable()" = "heads(::@- & bookmarks() & ~private())"

# current branch with a bit of context
"slice()" = "slice(@)"
"slice(from)" = "ancestors(reachable(from, mutable()), 2)"

# commits that haven't been merged into trunk
"open()" = "open(mine())"
"open(domain)" = "domain ~ ::immutable_heads()"

# commits that have been merged into trunk
"merged()" = "merged(trunk())"
"merged(into)" = "bookmarks() & ..into"

# recent commits
"last()" = "last(20)"
"last(n)" = "ancestors(@, n)"

"recent()" = 'recent(after:"14 days ago")'
"recent(when)" = '''
    ancestors(
        reachable(
            immutable_heads()..(@ | committer_date(when)::),
            mutable()),
        2)
    | trunk()
'''

# view revisions ancestry from where it diverged from trunk
"stack()" = "stack(@)"
"stack(from)" = "ancestors((immutable()..from) | from::, 2)"

# see the ancestry of two heads back to where they diverged
# usage: compare(abc | foo | bar)
"compare(heads)" = "connected(ancestors(::heads ~ ::trunk(), 2)) | heads"

# some helpers for finding forgotten/unloved bookmarks
"orphans()" = "mutable() ~ ::bookmarks()"
"stale()" = "bookmarks() ~ trunk()::"
"lagging_bookmarks()" = "::bookmarks() & mutable() & mine() ~ trunk()::"

# commits considered private by git.private-commits
"private()" = "description(glob:\"private:*\")"
"wip()" = 'description(glob:"wip:*") ~ ::immutable_heads()'


[aliases]
bootstrap = ["git", "init", "--colocate"]
gf = ["git", "fetch"]
gp = ["git", "push"]

# rebase bumpable branches on top of trunk
bump = ["rebase", "-b", "bumpable()", "-d", "trunk()"]
fresh = ["new", "main"]
pushdown = ["rebase", "-r", "@-", "--insert-after"]

# move tuggable bookmarks forward to latest non-private non-current commits
tug = ["bookmark", "move", "--from", "tuggable()", "--to", "tug_target()"]

# bring a branch up to date with trunk()
up = ["rebase", "--skip-emptied", "-d", "trunk()"]

changed = ["diff", "--name-only"]
commitid = ["log", "--no-graph", "-T", 'commit_id ++ "\n"']
changeid = ["log", "--no-graph", "-T", 'change_id ++ "\n"']
dv = [
  "--config=templates.draft_commit_description=commit_description_verbose",
  "describe",
]

all = ["log", "-r", "all()"]

[merge-tools.diffconflicts]
program = "nvim"
merge-args = ["-c", "JJDiffConflicts!", "$output", "$base", "$left", "$right"]
merge-tool-edits-conflict-markers = true


[templates]
# draft_commit_description = "commit_description_verbose"


[template-aliases]
commit_description_verbose = '''
concat(
  description,
  "\n",
  "JJ: This commit contains the following changes:\n",
  indent("JJ:    ", diff.stat(72)),
  "JJ: ignore-rest\n",
  diff.git(),
)
'''


[ui]
default-command = "log"


[user]
name = "Luke Randall"
email = "luke.randall@gmail.com"


[git]
private-commits = "private()"
